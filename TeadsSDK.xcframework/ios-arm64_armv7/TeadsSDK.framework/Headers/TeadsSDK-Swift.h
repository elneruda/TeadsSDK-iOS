#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef TEADSSDK_SWIFT_H
#define TEADSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TeadsSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, AdErrorCode, open) {
  AdErrorCodeErrorNoSlot = 1,
  AdErrorCodeErrorNetwork = 2,
  AdErrorCodeErrorNotFilled = 3,
  AdErrorCodeErrorBadResponse = 4,
  AdErrorCodeErrorVastError = 5,
  AdErrorCodeErrorUserIdMissing = 6,
  AdErrorCodeErrorInternal = 7,
  AdErrorCodeDisabledApp = 8,
  AdErrorCodeErrorAdRequest = 9,
};


SWIFT_CLASS("_TtC8TeadsSDK12AdFailReason")
@interface AdFailReason : NSObject
/// Error code
@property (nonatomic) enum AdErrorCode errorCode;
/// String that describes the error reason
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
- (nonnull instancetype)initWithErrorCode:(enum AdErrorCode)errorCode errorMessage:(NSString * _Nonnull)errorMessage OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







/// Transparency & Consent Framework versions
typedef SWIFT_ENUM(NSInteger, TCFVersion, open) {
  TCFVersionV1 = 1,
  TCFVersionV2 = 2,
};

@class TFAAdView;
@class UIViewController;
enum TeadsAdPlaybackState : NSInteger;

SWIFT_PROTOCOL("_TtP8TeadsSDK13TFAAdDelegate_")
@protocol TFAAdDelegate
/// Called when you get an ad
/// \param ad The teadsAd object
///
/// \param adRatio ratio of the ad
///
- (void)didReceiveAd:(TFAAdView * _Nonnull)ad adRatio:(CGFloat)adRatio;
/// Called when you did not get and ad
/// \param ad The teadsAd object
///
/// \param adFailReason AdFailReason object that contains an error code and an error message
///
- (void)didFailToReceiveAd:(TFAAdView * _Nonnull)ad adFailReason:(AdFailReason * _Nonnull)adFailReason;
/// Called when the ad should be closed
/// \param ad The teadsAd object
///
/// \param userAction is the close an action from the user or an automatic one
///
- (void)adClose:(TFAAdView * _Nonnull)ad userAction:(BOOL)userAction;
/// Called when the teads SDK encounter an error
/// \param ad The teadsAd object
///
/// \param errorMessage error message related to the error
///
- (void)adError:(TFAAdView * _Nonnull)ad errorMessage:(NSString * _Nonnull)errorMessage;
@optional
/// Called when ad wants to present safariViewController (Click to action)
/// ChildViewController integration could lead to not find with accuracy topViewController, publisher can specify it
/// note:
/// event is not triggered when ad displayed on full screen
/// \param ad The teadsAd object
///
///
/// returns:
/// UIViewController to present SFSafariViewController
- (UIViewController * _Nullable)adBrowserWillOpen:(TFAAdView * _Nonnull)ad SWIFT_WARN_UNUSED_RESULT;
/// Called when the modal browser is open
/// \param ad The teadsAd object
///
- (void)adBrowserDidOpen:(TFAAdView * _Nonnull)ad;
/// Called when the modal browser is closed
/// \param ad The teadsAd object
///
- (void)adBrowserDidClose:(TFAAdView * _Nonnull)ad;
/// Called when ad is shown in fullscreen
/// \param ad The teadsAd object
///
- (void)adDidOpenFullscreen:(TFAAdView * _Nonnull)ad;
/// Called when ad leaves the fullscreen mode
/// \param ad The teadsAd object
///
- (void)adDidCloseFullscreen:(TFAAdView * _Nonnull)ad;
/// Called when ad start
/// \param ad The teadsAd object
///
/// \param state playback state
///
- (void)adPlaybackChange:(TFAAdView * _Nonnull)ad state:(enum TeadsAdPlaybackState)state;
/// Called when ad changes volume state
/// deprecated since 4.1.x please use TFASoundDelegate instead
/// \param ad The teadsAd object
///
/// \param muted true if the sound is off false otherwise
///
- (void)adDidChangeVolume:(TFAAdView * _Nonnull)ad muted:(BOOL)muted SWIFT_DEPRECATED_MSG("use TFASoundDelegate instead");
@required
/// Called when the ad ratio was updated
/// <h1>Example:</h1>
/// resize view slot according to ratio
/// \code
/// let adHeight = view.frame.width/adRatio
/// teadsAdViewHeightConstraint.constant = adHeight
///
/// \endcode\param ad Teads Ad View
///
/// \param ratio ratio of the ad
///
- (void)didUpdateRatio:(TFAAdView * _Nonnull)ad ratio:(CGFloat)ratio;
@end

@protocol TFASoundDelegate;
@class NSCoder;
@class TeadsAdSettings;

SWIFT_CLASS("_TtC8TeadsSDK9TFAAdView")
@interface TFAAdView : UIView
/// Ad loading state
@property (nonatomic, readonly) BOOL isLoading;
/// Ad loaded state
@property (nonatomic, readonly) BOOL isLoaded;
/// Ad playing state
@property (nonatomic, readonly) BOOL isPlaying;
/// Ad sound enabled state
@property (nonatomic, readonly) BOOL isSoundActive;
/// implement delegate to follow ad lifecycle
@property (nonatomic, weak) id <TFAAdDelegate> _Nullable delegate;
/// implement delegate to follow ad audio lifecycle
@property (nonatomic, weak) id <TFASoundDelegate> _Nullable soundDelegate;
@property (nonatomic) IBInspectable NSInteger pid;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
- (void)awakeFromNib;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)didMoveToSuperview;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Request an ad from Teads ad server
/// \param teadsAdSettings Optionnal <code>TeadsAdSettings</code> to define custom settings
///
- (void)loadWithTeadsAdSettings:(TeadsAdSettings * _Nullable)teadsAdSettings;
/// Enables debug for TFAAdView instance
/// Will provide logs about what is going on
- (void)enableDebug;
/// Set the ad container, allow you to monitor your inventory
/// \param container the container which will contain the adView
///
- (void)setAdContainerViewWithContainer:(UIView * _Nonnull)container SWIFT_DEPRECATED_MSG("it is no longer needed to monitor your inventory.");
/// Add Context info
/// \param infoKey context information key
///
/// \param infoValue context information value
///
- (void)addContextInfoWithInfoKey:(NSString * _Nonnull)infoKey infoValue:(NSString * _Nonnull)infoValue;
/// dismiss ad fullscreen
- (void)dismissFullscreen;
/// Reset ad loading
- (void)reset;
/// Call that method when you did not add the TFAAdView to your to your view hierarchy or if Teads view has width/height of 0 and the container view reached the spot where the ad was supposed to be
- (void)slotReached SWIFT_DEPRECATED_MSG("it is no longer needed to monitor your inventory.");
@end

/// Ad playback states
typedef SWIFT_ENUM(NSInteger, TeadsAdPlaybackState, open) {
  TeadsAdPlaybackStatePlaybackStateCompleted = 0,
  TeadsAdPlaybackStatePlaybackStateStarted = 1,
  TeadsAdPlaybackStatePlaybackStatePaused = 2,
};


IB_DESIGNABLE
SWIFT_CLASS("_TtC8TeadsSDK15TFACustomAdView")
@interface TFACustomAdView : TFAAdView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Init TFACustomAdView by prodiving the pId and optional parameters
/// \param pid The Placement ID
///
/// \param delegate The TeadsAdDelegate object
///
///
/// returns:
/// TeadsAd instance
- (nonnull instancetype)initWithPid:(NSInteger)pid andDelegate:(id <TFAAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC8TeadsSDK15TFAInReadAdView")
@interface TFAInReadAdView : TFAAdView
/// Init TFACustomAdView by prodiving the pId and optional parameters
/// \param pid The Placement ID
///
/// \param delegate The TeadsAdDelegate object
///
///
/// returns:
/// TeadsAd instance
- (nonnull instancetype)initWithPid:(NSInteger)pid andDelegate:(id <TFAAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol TFAInterstitialAdDelegate;

SWIFT_CLASS("_TtC8TeadsSDK17TFAInterstitialAd")
@interface TFAInterstitialAd : NSObject <TFAAdDelegate>
@property (nonatomic, weak) id <TFAInterstitialAdDelegate> _Nullable delegate;
@property (nonatomic) BOOL isShown;
@property (nonatomic, readonly) BOOL isLoaded;
@property (nonatomic, readonly) BOOL isLoading;
- (nonnull instancetype)initWithPid:(NSInteger)pid andDelegate:(id <TFAInterstitialAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPid:(NSString * _Nonnull)pid delegate:(id <TFAInterstitialAdDelegate> _Nullable)delegate SWIFT_DEPRECATED_MSG("", "initWithPid:andDelegate:");
- (void)loadWithSettings:(TeadsAdSettings * _Nullable)settings;
- (void)show;
/// Add Context info
- (void)addContextInfoWithInfoKey:(NSString * _Nonnull)infoKey infoValue:(NSString * _Nonnull)infoValue;
- (void)didUpdateRatio:(TFAAdView * _Nonnull)ad ratio:(CGFloat)ratio;
- (void)didReceiveAd:(TFAAdView * _Nonnull)ad adRatio:(CGFloat)adRatio;
- (void)didFailToReceiveAd:(TFAAdView * _Nonnull)ad adFailReason:(AdFailReason * _Nonnull)adFailReason;
- (void)adClose:(TFAAdView * _Nonnull)ad userAction:(BOOL)userAction;
- (void)adError:(TFAAdView * _Nonnull)ad errorMessage:(NSString * _Nonnull)errorMessage;
- (void)adBrowserDidOpen:(TFAAdView * _Nonnull)ad;
- (void)adBrowserDidClose:(TFAAdView * _Nonnull)ad;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP8TeadsSDK25TFAInterstitialAdDelegate_")
@protocol TFAInterstitialAdDelegate
- (void)interstitialDidReceiveAd:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitial:(TFAInterstitialAd * _Nonnull)ad didFailToReceiveAdWithError:(NSString * _Nonnull)error;
@optional
- (void)interstitialWillOpen:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialWillClose:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialDidOpen:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialDidClose:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialBrowserDidOpen:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialBrowserDidClose:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialWillLeaveApplication:(TFAInterstitialAd * _Nonnull)ad;
@end


SWIFT_PROTOCOL("_TtP8TeadsSDK25TFAMediatedAdViewDelegate_")
@protocol TFAMediatedAdViewDelegate
/// Called when the ad ratio is udpated.
/// \param adView The adView in which the ad is being played.
///
/// \param ratio The ratio you should use to update your adView height.
///
- (void)didUpdateRatio:(UIView * _Nonnull)adView ratio:(CGFloat)ratio;
@end


SWIFT_CLASS("_TtC8TeadsSDK9TFAReward")
@interface TFAReward : NSObject
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic) double amount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol TFARewardedAdDelegate;

SWIFT_CLASS("_TtC8TeadsSDK13TFARewardedAd")
@interface TFARewardedAd : NSObject <TFAAdDelegate>
@property (nonatomic, weak) id <TFARewardedAdDelegate> _Nullable delegate;
@property (nonatomic) BOOL isShown;
@property (nonatomic, readonly) BOOL isLoaded;
@property (nonatomic, readonly) BOOL isLoading;
- (nonnull instancetype)initWithPid:(NSInteger)pid andDelegate:(id <TFARewardedAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPid:(NSString * _Nonnull)pid delegate:(id <TFARewardedAdDelegate> _Nullable)delegate SWIFT_DEPRECATED_MSG("", "initWithPid:andDelegate:");
- (void)loadWithSettings:(TeadsAdSettings * _Nullable)settings;
- (void)show;
/// Add Context info
- (void)addContextInfoWithInfoKey:(NSString * _Nonnull)infoKey infoValue:(NSString * _Nonnull)infoValue;
- (void)didUpdateRatio:(TFAAdView * _Nonnull)ad ratio:(CGFloat)ratio;
- (void)didReceiveAd:(TFAAdView * _Nonnull)ad adRatio:(CGFloat)adRatio;
- (void)didFailToReceiveAd:(TFAAdView * _Nonnull)ad adFailReason:(AdFailReason * _Nonnull)adFailReason;
- (void)adClose:(TFAAdView * _Nonnull)ad userAction:(BOOL)userAction;
- (void)adError:(TFAAdView * _Nonnull)ad errorMessage:(NSString * _Nonnull)errorMessage;
- (void)adPlaybackChange:(TFAAdView * _Nonnull)ad state:(enum TeadsAdPlaybackState)state;
- (void)adBrowserDidOpen:(TFAAdView * _Nonnull)ad;
- (void)adBrowserDidClose:(TFAAdView * _Nonnull)ad;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP8TeadsSDK21TFARewardedAdDelegate_")
@protocol TFARewardedAdDelegate
- (void)rewarded:(TFARewardedAd * _Nonnull)rewardedAd didRewardUserWith:(TFAReward * _Nullable)reward;
- (void)rewarded:(TFARewardedAd * _Nonnull)rewardedAd didFailToReceiveAdWithError:(NSString * _Nonnull)didFailToReceiveAdWithError;
- (void)rewardedAdDidReceive:(TFARewardedAd * _Nonnull)rewardedAd;
@optional
- (void)rewardedAdDidOpen:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdDidStartPlaying:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdDidCompletePlaying:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdDidClose:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdBrowserDidOpen:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdBrowserDidClose:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdWillLeaveApplication:(TFARewardedAd * _Nonnull)rewardedAd;
@end


SWIFT_PROTOCOL("_TtP8TeadsSDK16TFASoundDelegate_")
@protocol TFASoundDelegate
/// Called when the ad will start playing audio
- (void)adWillStartPlayingAudio:(TFAAdView * _Nonnull)ad;
/// Called when the ad will stop playing audio
- (void)adDidStopPlayingAudio:(TFAAdView * _Nonnull)ad;
@end


SWIFT_CLASS("_TtC8TeadsSDK5Teads")
@interface Teads : NSObject
/// Current sdkVersion
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Teads (SWIFT_EXTENSION(TeadsSDK))
/// Crash monitoring
/// TeadsSDK monitors for crash that only appears in framework
/// note:
/// TeadsSDK does not disturb third party crash handler/reporter such as Crashlytics
+ (void)configure;
@end

@protocol TeadsAdPlacementDelegate;
@class TeadsAdRequest;

SWIFT_CLASS("_TtC8TeadsSDK16TeadsAdPlacement")
@interface TeadsAdPlacement : NSObject
- (nullable instancetype)initWithPlacementId:(NSInteger)placementId delegate:(id <TeadsAdPlacementDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)requestAd:(TeadsAdRequest * _Nonnull)request;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TeadsNativeAd;

SWIFT_PROTOCOL("_TtP8TeadsSDK24TeadsAdPlacementDelegate_")
@protocol TeadsAdPlacementDelegate
/// Called when you get an ad
/// \param adPlacement The teads placement which triggered the request ad
///
/// \param nativeAd The native associate to a native ad request
///
- (void)adPlacement:(TeadsAdPlacement * _Nonnull)adPlacement didReceiveNativeAd:(TeadsNativeAd * _Nonnull)nativeAd;
/// Called when you did not get and ad
/// \param adPlacement The teads placement which triggered the request ad
///
/// \param adFailReason AdFailReason object that contains an error code and an error message
///
- (void)adPlacement:(TeadsAdPlacement * _Nonnull)adPlacement didFailToReceiveAd:(AdFailReason * _Nonnull)adFailReason;
@end


SWIFT_CLASS("_TtC8TeadsSDK14TeadsAdRequest")
@interface TeadsAdRequest : NSObject
- (nonnull instancetype)initWithSettings:(TeadsAdSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8TeadsSDK15TeadsAdSettings")
@interface TeadsAdSettings : NSObject
/// Prevent TeadsSDK to automatically handle/monitor crashes
- (void)disableCrashMonitoring;
/// The Teads inApp Validation tool is the best way to ensure all basic features and prerequisites are correctly implemented. It is also useful during integration iterations
/// note:
/// follow <a href="https://support.teads.tv/support/solutions/articles/36000209100-5-validate-your-integration-with-the-validation-tool">validate your integration documentation</a>
- (void)enableValidationMode;
/// By default, the Teads inApp SDK handles the audio session by setting its category to ambient.
/// This means that all the audio played by other apps will simply mix with the ad sound.
/// note:
/// If you chose to handle the audio session by yourself you need to call <code>disableTeadsAudioSessionManagement</code>
- (void)disableTeadsAudioSessionManagement;
/// Enable all TeadsSDK Log for debugging purpose
- (void)enableDebug;
- (void)disableLocation;
- (void)enableLigtEndScreen SWIFT_DEPRECATED_MSG("", "enableLightEndScreen");
/// When the ad playback is finished, we display an endscreen with light color (Dark color by default).
- (void)enableLightEndScreen;
- (void)disableMediaPreload;
/// Set the publisher http page url that matches the content where Teads Ad will be loaded into.
/// \param urlString publisher url page
///
- (void)pageUrl:(NSString * _Nonnull)urlString;
/// The user consent following the IAB specifications.
/// note:
/// <a href="https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md">GDPR Transparency and Consent Framework </a> IAB documentation
/// \param subjectToGDPR <code>"1"</code> if the traffic or the publisher is in the EEA (European Economic Area),
/// `“0” if it is not, null if it’s unknown.
///
/// \param consent Which vendors and purposes did the user give consent for
///
/// \param tcfVersion Transparency and Consent Framework version
///
/// \param cmpSdkID Consent Manager unique ID
///
- (void)userConsentWithSubjectToGDPR:(NSString * _Nonnull)subjectToGDPR consent:(NSString * _Nonnull)consent tcfVersion:(enum TCFVersion)tcfVersion cmpSdkID:(NSInteger)cmpSdkID;
/// The US privacy CCPA user consent following IAB specifications
/// \param consent The CCPA consent string
///
- (void)setUsPrivacyWithConsent:(NSString * _Nonnull)consent;
/// Prevent to automatically set UIDevice.current.isBatteryMonitoringEnabled
- (void)disableBatteryMonitoring;
/// Subscribe a delegate class which will be in charge of resizing your ad size.
/// warning:
/// To be used only in case your ads are running through mediation !
/// \param delegate The class conforming to TFAMediatedAdViewDelegate where adView resizing will be done.
///
/// \param adView Your mediated ad view which contains your ad.
///
///
/// throws:
/// Error if given adView is not resizable.
- (BOOL)subscribeAdResizeDelegate:(id <TFAMediatedAdViewDelegate> _Nonnull)delegate forAdView:(UIView * _Nonnull)adView error:(NSError * _Nullable * _Nullable)error;
/// Add extra informations to settings
/// \param value extra value
///
/// \param key extra key
///
- (void)addExtras:(NSString * _Nonnull)value for:(NSString * _Nonnull)key;
/// Instance settings builder
/// \param build closure to tune settings
///
- (nonnull instancetype)initWithBuild:(SWIFT_NOESCAPE void (^ _Nonnull)(TeadsAdSettings * _Nonnull))build OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TeadsAdSettings (SWIFT_EXTENSION(TeadsSDK))
/// Return a dictionary representation of the current TeadsAdSettings object.
///
/// returns:
/// A <code>[AnyHashable: Any]</code> representing the object.
- (NSDictionary * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Create an instance from <code>[AnyHashable: Any]</code>
/// \param dictionary representation of TeadsAdSettings instance
///
///
/// returns:
/// A <code>TeadsAsSettings</code> object instance.
+ (TeadsAdSettings * _Nullable)instanceFrom:(NSDictionary * _Nonnull)dictionary error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

IB_DESIGNABLE
SWIFT_CLASS("_TtC8TeadsSDK14TeadsMediaView")
@interface TeadsMediaView : UIView
@property (nonatomic, strong) IBInspectable UIImage * _Nullable placeholderImage;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class TeadsNativeAsset;

@interface TeadsMediaView (SWIFT_EXTENSION(TeadsSDK))
+ (TeadsMediaView * _Nonnull)fromAssetWithAsset:(TeadsNativeAsset * _Nonnull)asset SWIFT_WARN_UNUSED_RESULT;
@end

@class TeadsNativeImageAsset;
@protocol TeadsNativeAdDelegate;

SWIFT_CLASS("_TtC8TeadsSDK13TeadsNativeAd")
@interface TeadsNativeAd : NSObject
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable title;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable content;
@property (nonatomic, readonly, strong) TeadsNativeImageAsset * _Nullable imageUrl;
@property (nonatomic, readonly, strong) TeadsNativeImageAsset * _Nullable iconUrl;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable sponsored;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable callToAction;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable video;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable rating;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable price;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable adChoices;
@property (nonatomic, weak) id <TeadsNativeAdDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<TeadsNativeAsset *> * _Nullable assets;
- (void)registerContainerIn:(UIView * _Nonnull)view;
- (void)registerWithAsset:(TeadsNativeAsset * _Nonnull)asset in:(UIView * _Nonnull)view;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_PROTOCOL("_TtP8TeadsSDK21TeadsNativeAdDelegate_")
@protocol TeadsNativeAdDelegate
@optional
/// Called when a valid impression is triggered on this native ad.
/// \param nativeAd The nativeAd instance on which an impression is recorded
///
- (void)nativeAdDidRecordAdImpression:(TeadsNativeAd * _Nonnull)nativeAd;
/// Called when a click is recorded on this native ad
/// \param nativeAd The nativeAd instance on which a click is recorded
///
- (void)nativeAdDidRecordAdClick:(TeadsNativeAd * _Nonnull)nativeAd;
@end

enum Template : NSInteger;

SWIFT_CLASS("_TtC8TeadsSDK20TeadsNativeAdRequest")
@interface TeadsNativeAdRequest : TeadsAdRequest
- (nonnull instancetype)initWithTemplate:(enum Template)template_ settings:(TeadsAdSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSettings:(TeadsAdSettings * _Nullable)settings SWIFT_UNAVAILABLE;
@end

@class UILabel;
@class UIImageView;
@class UIButton;

IB_DESIGNABLE
SWIFT_CLASS("_TtC8TeadsSDK17TeadsNativeAdView")
@interface TeadsNativeAdView : UIView
@property (nonatomic, weak) IBOutlet UILabel * _Nullable titleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable contentLabel;
@property (nonatomic, weak) IBOutlet TeadsMediaView * _Nullable mediaView;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable iconImageView;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable advertiserLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Nullable callToActionButton;
@property (nonatomic, weak) IBOutlet UIView * _Nullable ratingView;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable priceLabel;
@property (nonatomic, strong) TeadsNativeAd * _Nullable nativeAd;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, Template, open) {
  TemplateMopub = -2,
  TemplateAdmob = -1,
  TemplateFeedArticle = 0,
};



SWIFT_CLASS("_TtC8TeadsSDK16TeadsNativeAsset")
@interface TeadsNativeAsset : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8TeadsSDK21TeadsNativeImageAsset")
@interface TeadsNativeImageAsset : TeadsNativeAsset
@end














#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef TEADSSDK_SWIFT_H
#define TEADSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TeadsSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, AdErrorCode, open) {
  AdErrorCodeErrorNoSlot = 1,
  AdErrorCodeErrorNetwork = 2,
  AdErrorCodeErrorNotFilled = 3,
  AdErrorCodeErrorBadResponse = 4,
  AdErrorCodeErrorVastError = 5,
  AdErrorCodeErrorUserIdMissing = 6,
  AdErrorCodeErrorInternal = 7,
  AdErrorCodeDisabledApp = 8,
  AdErrorCodeErrorAdRequest = 9,
};


SWIFT_CLASS("_TtC8TeadsSDK12AdFailReason")
@interface AdFailReason : NSObject
/// Error code
@property (nonatomic) enum AdErrorCode errorCode;
/// String that describes the error reason
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
- (nonnull instancetype)initWithErrorCode:(enum AdErrorCode)errorCode errorMessage:(NSString * _Nonnull)errorMessage OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







/// Transparency & Consent Framework versions
typedef SWIFT_ENUM(NSInteger, TCFVersion, open) {
  TCFVersionV1 = 1,
  TCFVersionV2 = 2,
};

@class TFAAdView;
@class UIViewController;
enum TeadsAdPlaybackState : NSInteger;

SWIFT_PROTOCOL("_TtP8TeadsSDK13TFAAdDelegate_")
@protocol TFAAdDelegate
/// Called when you get an ad
/// \param ad The teadsAd object
///
/// \param adRatio ratio of the ad
///
- (void)didReceiveAd:(TFAAdView * _Nonnull)ad adRatio:(CGFloat)adRatio;
/// Called when you did not get and ad
/// \param ad The teadsAd object
///
/// \param adFailReason AdFailReason object that contains an error code and an error message
///
- (void)didFailToReceiveAd:(TFAAdView * _Nonnull)ad adFailReason:(AdFailReason * _Nonnull)adFailReason;
/// Called when the ad should be closed
/// \param ad The teadsAd object
///
/// \param userAction is the close an action from the user or an automatic one
///
- (void)adClose:(TFAAdView * _Nonnull)ad userAction:(BOOL)userAction;
/// Called when the teads SDK encounter an error
/// \param ad The teadsAd object
///
/// \param errorMessage error message related to the error
///
- (void)adError:(TFAAdView * _Nonnull)ad errorMessage:(NSString * _Nonnull)errorMessage;
@optional
/// Called when ad wants to present safariViewController (Click to action)
/// ChildViewController integration could lead to not find with accuracy topViewController, publisher can specify it
/// note:
/// event is not triggered when ad displayed on full screen
/// \param ad The teadsAd object
///
///
/// returns:
/// UIViewController to present SFSafariViewController
- (UIViewController * _Nullable)adBrowserWillOpen:(TFAAdView * _Nonnull)ad SWIFT_WARN_UNUSED_RESULT;
/// Called when the modal browser is open
/// \param ad The teadsAd object
///
- (void)adBrowserDidOpen:(TFAAdView * _Nonnull)ad;
/// Called when the modal browser is closed
/// \param ad The teadsAd object
///
- (void)adBrowserDidClose:(TFAAdView * _Nonnull)ad;
/// Called when ad is shown in fullscreen
/// \param ad The teadsAd object
///
- (void)adDidOpenFullscreen:(TFAAdView * _Nonnull)ad;
/// Called when ad leaves the fullscreen mode
/// \param ad The teadsAd object
///
- (void)adDidCloseFullscreen:(TFAAdView * _Nonnull)ad;
/// Called when ad start
/// \param ad The teadsAd object
///
/// \param state playback state
///
- (void)adPlaybackChange:(TFAAdView * _Nonnull)ad state:(enum TeadsAdPlaybackState)state;
/// Called when ad changes volume state
/// deprecated since 4.1.x please use TFASoundDelegate instead
/// \param ad The teadsAd object
///
/// \param muted true if the sound is off false otherwise
///
- (void)adDidChangeVolume:(TFAAdView * _Nonnull)ad muted:(BOOL)muted SWIFT_DEPRECATED_MSG("use TFASoundDelegate instead");
@required
/// Called when the ad ratio was updated
/// <h1>Example:</h1>
/// resize view slot according to ratio
/// \code
/// let adHeight = view.frame.width/adRatio
/// teadsAdViewHeightConstraint.constant = adHeight
///
/// \endcode\param ad Teads Ad View
///
/// \param ratio ratio of the ad
///
- (void)didUpdateRatio:(TFAAdView * _Nonnull)ad ratio:(CGFloat)ratio;
@end

@protocol TFASoundDelegate;
@class NSCoder;
@class TeadsAdSettings;

SWIFT_CLASS("_TtC8TeadsSDK9TFAAdView")
@interface TFAAdView : UIView
/// Ad loading state
@property (nonatomic, readonly) BOOL isLoading;
/// Ad loaded state
@property (nonatomic, readonly) BOOL isLoaded;
/// Ad playing state
@property (nonatomic, readonly) BOOL isPlaying;
/// Ad sound enabled state
@property (nonatomic, readonly) BOOL isSoundActive;
/// implement delegate to follow ad lifecycle
@property (nonatomic, weak) id <TFAAdDelegate> _Nullable delegate;
/// implement delegate to follow ad audio lifecycle
@property (nonatomic, weak) id <TFASoundDelegate> _Nullable soundDelegate;
@property (nonatomic) IBInspectable NSInteger pid;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
- (void)awakeFromNib;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)didMoveToSuperview;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Request an ad from Teads ad server
/// \param teadsAdSettings Optionnal <code>TeadsAdSettings</code> to define custom settings
///
- (void)loadWithTeadsAdSettings:(TeadsAdSettings * _Nullable)teadsAdSettings;
/// Enables debug for TFAAdView instance
/// Will provide logs about what is going on
- (void)enableDebug;
/// Set the ad container, allow you to monitor your inventory
/// \param container the container which will contain the adView
///
- (void)setAdContainerViewWithContainer:(UIView * _Nonnull)container SWIFT_DEPRECATED_MSG("it is no longer needed to monitor your inventory.");
/// Add Context info
/// \param infoKey context information key
///
/// \param infoValue context information value
///
- (void)addContextInfoWithInfoKey:(NSString * _Nonnull)infoKey infoValue:(NSString * _Nonnull)infoValue;
/// dismiss ad fullscreen
- (void)dismissFullscreen;
/// Reset ad loading
- (void)reset;
/// Call that method when you did not add the TFAAdView to your to your view hierarchy or if Teads view has width/height of 0 and the container view reached the spot where the ad was supposed to be
- (void)slotReached SWIFT_DEPRECATED_MSG("it is no longer needed to monitor your inventory.");
@end

/// Ad playback states
typedef SWIFT_ENUM(NSInteger, TeadsAdPlaybackState, open) {
  TeadsAdPlaybackStatePlaybackStateCompleted = 0,
  TeadsAdPlaybackStatePlaybackStateStarted = 1,
  TeadsAdPlaybackStatePlaybackStatePaused = 2,
};


IB_DESIGNABLE
SWIFT_CLASS("_TtC8TeadsSDK15TFACustomAdView")
@interface TFACustomAdView : TFAAdView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Init TFACustomAdView by prodiving the pId and optional parameters
/// \param pid The Placement ID
///
/// \param delegate The TeadsAdDelegate object
///
///
/// returns:
/// TeadsAd instance
- (nonnull instancetype)initWithPid:(NSInteger)pid andDelegate:(id <TFAAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC8TeadsSDK15TFAInReadAdView")
@interface TFAInReadAdView : TFAAdView
/// Init TFACustomAdView by prodiving the pId and optional parameters
/// \param pid The Placement ID
///
/// \param delegate The TeadsAdDelegate object
///
///
/// returns:
/// TeadsAd instance
- (nonnull instancetype)initWithPid:(NSInteger)pid andDelegate:(id <TFAAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol TFAInterstitialAdDelegate;

SWIFT_CLASS("_TtC8TeadsSDK17TFAInterstitialAd")
@interface TFAInterstitialAd : NSObject <TFAAdDelegate>
@property (nonatomic, weak) id <TFAInterstitialAdDelegate> _Nullable delegate;
@property (nonatomic) BOOL isShown;
@property (nonatomic, readonly) BOOL isLoaded;
@property (nonatomic, readonly) BOOL isLoading;
- (nonnull instancetype)initWithPid:(NSInteger)pid andDelegate:(id <TFAInterstitialAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPid:(NSString * _Nonnull)pid delegate:(id <TFAInterstitialAdDelegate> _Nullable)delegate SWIFT_DEPRECATED_MSG("", "initWithPid:andDelegate:");
- (void)loadWithSettings:(TeadsAdSettings * _Nullable)settings;
- (void)show;
/// Add Context info
- (void)addContextInfoWithInfoKey:(NSString * _Nonnull)infoKey infoValue:(NSString * _Nonnull)infoValue;
- (void)didUpdateRatio:(TFAAdView * _Nonnull)ad ratio:(CGFloat)ratio;
- (void)didReceiveAd:(TFAAdView * _Nonnull)ad adRatio:(CGFloat)adRatio;
- (void)didFailToReceiveAd:(TFAAdView * _Nonnull)ad adFailReason:(AdFailReason * _Nonnull)adFailReason;
- (void)adClose:(TFAAdView * _Nonnull)ad userAction:(BOOL)userAction;
- (void)adError:(TFAAdView * _Nonnull)ad errorMessage:(NSString * _Nonnull)errorMessage;
- (void)adBrowserDidOpen:(TFAAdView * _Nonnull)ad;
- (void)adBrowserDidClose:(TFAAdView * _Nonnull)ad;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP8TeadsSDK25TFAInterstitialAdDelegate_")
@protocol TFAInterstitialAdDelegate
- (void)interstitialDidReceiveAd:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitial:(TFAInterstitialAd * _Nonnull)ad didFailToReceiveAdWithError:(NSString * _Nonnull)error;
@optional
- (void)interstitialWillOpen:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialWillClose:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialDidOpen:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialDidClose:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialBrowserDidOpen:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialBrowserDidClose:(TFAInterstitialAd * _Nonnull)ad;
- (void)interstitialWillLeaveApplication:(TFAInterstitialAd * _Nonnull)ad;
@end


SWIFT_PROTOCOL("_TtP8TeadsSDK25TFAMediatedAdViewDelegate_")
@protocol TFAMediatedAdViewDelegate
/// Called when the ad ratio is udpated.
/// \param adView The adView in which the ad is being played.
///
/// \param ratio The ratio you should use to update your adView height.
///
- (void)didUpdateRatio:(UIView * _Nonnull)adView ratio:(CGFloat)ratio;
@end


SWIFT_CLASS("_TtC8TeadsSDK9TFAReward")
@interface TFAReward : NSObject
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic) double amount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol TFARewardedAdDelegate;

SWIFT_CLASS("_TtC8TeadsSDK13TFARewardedAd")
@interface TFARewardedAd : NSObject <TFAAdDelegate>
@property (nonatomic, weak) id <TFARewardedAdDelegate> _Nullable delegate;
@property (nonatomic) BOOL isShown;
@property (nonatomic, readonly) BOOL isLoaded;
@property (nonatomic, readonly) BOOL isLoading;
- (nonnull instancetype)initWithPid:(NSInteger)pid andDelegate:(id <TFARewardedAdDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPid:(NSString * _Nonnull)pid delegate:(id <TFARewardedAdDelegate> _Nullable)delegate SWIFT_DEPRECATED_MSG("", "initWithPid:andDelegate:");
- (void)loadWithSettings:(TeadsAdSettings * _Nullable)settings;
- (void)show;
/// Add Context info
- (void)addContextInfoWithInfoKey:(NSString * _Nonnull)infoKey infoValue:(NSString * _Nonnull)infoValue;
- (void)didUpdateRatio:(TFAAdView * _Nonnull)ad ratio:(CGFloat)ratio;
- (void)didReceiveAd:(TFAAdView * _Nonnull)ad adRatio:(CGFloat)adRatio;
- (void)didFailToReceiveAd:(TFAAdView * _Nonnull)ad adFailReason:(AdFailReason * _Nonnull)adFailReason;
- (void)adClose:(TFAAdView * _Nonnull)ad userAction:(BOOL)userAction;
- (void)adError:(TFAAdView * _Nonnull)ad errorMessage:(NSString * _Nonnull)errorMessage;
- (void)adPlaybackChange:(TFAAdView * _Nonnull)ad state:(enum TeadsAdPlaybackState)state;
- (void)adBrowserDidOpen:(TFAAdView * _Nonnull)ad;
- (void)adBrowserDidClose:(TFAAdView * _Nonnull)ad;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP8TeadsSDK21TFARewardedAdDelegate_")
@protocol TFARewardedAdDelegate
- (void)rewarded:(TFARewardedAd * _Nonnull)rewardedAd didRewardUserWith:(TFAReward * _Nullable)reward;
- (void)rewarded:(TFARewardedAd * _Nonnull)rewardedAd didFailToReceiveAdWithError:(NSString * _Nonnull)didFailToReceiveAdWithError;
- (void)rewardedAdDidReceive:(TFARewardedAd * _Nonnull)rewardedAd;
@optional
- (void)rewardedAdDidOpen:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdDidStartPlaying:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdDidCompletePlaying:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdDidClose:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdBrowserDidOpen:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdBrowserDidClose:(TFARewardedAd * _Nonnull)rewardedAd;
- (void)rewardedAdWillLeaveApplication:(TFARewardedAd * _Nonnull)rewardedAd;
@end


SWIFT_PROTOCOL("_TtP8TeadsSDK16TFASoundDelegate_")
@protocol TFASoundDelegate
/// Called when the ad will start playing audio
- (void)adWillStartPlayingAudio:(TFAAdView * _Nonnull)ad;
/// Called when the ad will stop playing audio
- (void)adDidStopPlayingAudio:(TFAAdView * _Nonnull)ad;
@end


SWIFT_CLASS("_TtC8TeadsSDK5Teads")
@interface Teads : NSObject
/// Current sdkVersion
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Teads (SWIFT_EXTENSION(TeadsSDK))
/// Crash monitoring
/// TeadsSDK monitors for crash that only appears in framework
/// note:
/// TeadsSDK does not disturb third party crash handler/reporter such as Crashlytics
+ (void)configure;
@end

@protocol TeadsAdPlacementDelegate;
@class TeadsAdRequest;

SWIFT_CLASS("_TtC8TeadsSDK16TeadsAdPlacement")
@interface TeadsAdPlacement : NSObject
- (nullable instancetype)initWithPlacementId:(NSInteger)placementId delegate:(id <TeadsAdPlacementDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)requestAd:(TeadsAdRequest * _Nonnull)request;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TeadsNativeAd;

SWIFT_PROTOCOL("_TtP8TeadsSDK24TeadsAdPlacementDelegate_")
@protocol TeadsAdPlacementDelegate
/// Called when you get an ad
/// \param adPlacement The teads placement which triggered the request ad
///
/// \param nativeAd The native associate to a native ad request
///
- (void)adPlacement:(TeadsAdPlacement * _Nonnull)adPlacement didReceiveNativeAd:(TeadsNativeAd * _Nonnull)nativeAd;
/// Called when you did not get and ad
/// \param adPlacement The teads placement which triggered the request ad
///
/// \param adFailReason AdFailReason object that contains an error code and an error message
///
- (void)adPlacement:(TeadsAdPlacement * _Nonnull)adPlacement didFailToReceiveAd:(AdFailReason * _Nonnull)adFailReason;
@end


SWIFT_CLASS("_TtC8TeadsSDK14TeadsAdRequest")
@interface TeadsAdRequest : NSObject
- (nonnull instancetype)initWithSettings:(TeadsAdSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8TeadsSDK15TeadsAdSettings")
@interface TeadsAdSettings : NSObject
/// Prevent TeadsSDK to automatically handle/monitor crashes
- (void)disableCrashMonitoring;
/// The Teads inApp Validation tool is the best way to ensure all basic features and prerequisites are correctly implemented. It is also useful during integration iterations
/// note:
/// follow <a href="https://support.teads.tv/support/solutions/articles/36000209100-5-validate-your-integration-with-the-validation-tool">validate your integration documentation</a>
- (void)enableValidationMode;
/// By default, the Teads inApp SDK handles the audio session by setting its category to ambient.
/// This means that all the audio played by other apps will simply mix with the ad sound.
/// note:
/// If you chose to handle the audio session by yourself you need to call <code>disableTeadsAudioSessionManagement</code>
- (void)disableTeadsAudioSessionManagement;
/// Enable all TeadsSDK Log for debugging purpose
- (void)enableDebug;
- (void)disableLocation;
- (void)enableLigtEndScreen SWIFT_DEPRECATED_MSG("", "enableLightEndScreen");
/// When the ad playback is finished, we display an endscreen with light color (Dark color by default).
- (void)enableLightEndScreen;
- (void)disableMediaPreload;
/// Set the publisher http page url that matches the content where Teads Ad will be loaded into.
/// \param urlString publisher url page
///
- (void)pageUrl:(NSString * _Nonnull)urlString;
/// The user consent following the IAB specifications.
/// note:
/// <a href="https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md">GDPR Transparency and Consent Framework </a> IAB documentation
/// \param subjectToGDPR <code>"1"</code> if the traffic or the publisher is in the EEA (European Economic Area),
/// `“0” if it is not, null if it’s unknown.
///
/// \param consent Which vendors and purposes did the user give consent for
///
/// \param tcfVersion Transparency and Consent Framework version
///
/// \param cmpSdkID Consent Manager unique ID
///
- (void)userConsentWithSubjectToGDPR:(NSString * _Nonnull)subjectToGDPR consent:(NSString * _Nonnull)consent tcfVersion:(enum TCFVersion)tcfVersion cmpSdkID:(NSInteger)cmpSdkID;
/// The US privacy CCPA user consent following IAB specifications
/// \param consent The CCPA consent string
///
- (void)setUsPrivacyWithConsent:(NSString * _Nonnull)consent;
/// Prevent to automatically set UIDevice.current.isBatteryMonitoringEnabled
- (void)disableBatteryMonitoring;
/// Subscribe a delegate class which will be in charge of resizing your ad size.
/// warning:
/// To be used only in case your ads are running through mediation !
/// \param delegate The class conforming to TFAMediatedAdViewDelegate where adView resizing will be done.
///
/// \param adView Your mediated ad view which contains your ad.
///
///
/// throws:
/// Error if given adView is not resizable.
- (BOOL)subscribeAdResizeDelegate:(id <TFAMediatedAdViewDelegate> _Nonnull)delegate forAdView:(UIView * _Nonnull)adView error:(NSError * _Nullable * _Nullable)error;
/// Add extra informations to settings
/// \param value extra value
///
/// \param key extra key
///
- (void)addExtras:(NSString * _Nonnull)value for:(NSString * _Nonnull)key;
/// Instance settings builder
/// \param build closure to tune settings
///
- (nonnull instancetype)initWithBuild:(SWIFT_NOESCAPE void (^ _Nonnull)(TeadsAdSettings * _Nonnull))build OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface TeadsAdSettings (SWIFT_EXTENSION(TeadsSDK))
/// Return a dictionary representation of the current TeadsAdSettings object.
///
/// returns:
/// A <code>[AnyHashable: Any]</code> representing the object.
- (NSDictionary * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Create an instance from <code>[AnyHashable: Any]</code>
/// \param dictionary representation of TeadsAdSettings instance
///
///
/// returns:
/// A <code>TeadsAsSettings</code> object instance.
+ (TeadsAdSettings * _Nullable)instanceFrom:(NSDictionary * _Nonnull)dictionary error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

IB_DESIGNABLE
SWIFT_CLASS("_TtC8TeadsSDK14TeadsMediaView")
@interface TeadsMediaView : UIView
@property (nonatomic, strong) IBInspectable UIImage * _Nullable placeholderImage;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class TeadsNativeAsset;

@interface TeadsMediaView (SWIFT_EXTENSION(TeadsSDK))
+ (TeadsMediaView * _Nonnull)fromAssetWithAsset:(TeadsNativeAsset * _Nonnull)asset SWIFT_WARN_UNUSED_RESULT;
@end

@class TeadsNativeImageAsset;
@protocol TeadsNativeAdDelegate;

SWIFT_CLASS("_TtC8TeadsSDK13TeadsNativeAd")
@interface TeadsNativeAd : NSObject
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable title;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable content;
@property (nonatomic, readonly, strong) TeadsNativeImageAsset * _Nullable imageUrl;
@property (nonatomic, readonly, strong) TeadsNativeImageAsset * _Nullable iconUrl;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable sponsored;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable callToAction;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable video;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable rating;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable price;
@property (nonatomic, readonly, strong) TeadsNativeAsset * _Nullable adChoices;
@property (nonatomic, weak) id <TeadsNativeAdDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<TeadsNativeAsset *> * _Nullable assets;
- (void)registerContainerIn:(UIView * _Nonnull)view;
- (void)registerWithAsset:(TeadsNativeAsset * _Nonnull)asset in:(UIView * _Nonnull)view;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_PROTOCOL("_TtP8TeadsSDK21TeadsNativeAdDelegate_")
@protocol TeadsNativeAdDelegate
@optional
/// Called when a valid impression is triggered on this native ad.
/// \param nativeAd The nativeAd instance on which an impression is recorded
///
- (void)nativeAdDidRecordAdImpression:(TeadsNativeAd * _Nonnull)nativeAd;
/// Called when a click is recorded on this native ad
/// \param nativeAd The nativeAd instance on which a click is recorded
///
- (void)nativeAdDidRecordAdClick:(TeadsNativeAd * _Nonnull)nativeAd;
@end

enum Template : NSInteger;

SWIFT_CLASS("_TtC8TeadsSDK20TeadsNativeAdRequest")
@interface TeadsNativeAdRequest : TeadsAdRequest
- (nonnull instancetype)initWithTemplate:(enum Template)template_ settings:(TeadsAdSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSettings:(TeadsAdSettings * _Nullable)settings SWIFT_UNAVAILABLE;
@end

@class UILabel;
@class UIImageView;
@class UIButton;

IB_DESIGNABLE
SWIFT_CLASS("_TtC8TeadsSDK17TeadsNativeAdView")
@interface TeadsNativeAdView : UIView
@property (nonatomic, weak) IBOutlet UILabel * _Nullable titleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable contentLabel;
@property (nonatomic, weak) IBOutlet TeadsMediaView * _Nullable mediaView;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable iconImageView;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable advertiserLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Nullable callToActionButton;
@property (nonatomic, weak) IBOutlet UIView * _Nullable ratingView;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable priceLabel;
@property (nonatomic, strong) TeadsNativeAd * _Nullable nativeAd;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, Template, open) {
  TemplateMopub = -2,
  TemplateAdmob = -1,
  TemplateFeedArticle = 0,
};



SWIFT_CLASS("_TtC8TeadsSDK16TeadsNativeAsset")
@interface TeadsNativeAsset : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8TeadsSDK21TeadsNativeImageAsset")
@interface TeadsNativeImageAsset : TeadsNativeAsset
@end














#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
