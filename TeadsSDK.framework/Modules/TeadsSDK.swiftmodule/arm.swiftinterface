// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TeadsSDK
import AVKit
import AdSupport
import Compression
import CoreTelephony
import Foundation
import JavaScriptCore
import MediaPlayer
import SafariServices
import Swift
import SystemConfiguration
@_exported import TeadsSDK
import UIKit
import WebKit
@_hasMissingDesignatedInitializers @objc public class TeadsNativeAsset : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let text: Swift.String?
  @objc final public let url: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
}
extension TeadsMediaView {
  @objc public static func fromAsset(asset: TeadsSDK.TeadsNativeAsset) -> TeadsSDK.TeadsMediaView
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class TeadsAdSettings : ObjectiveC.NSObject, Swift.Codable {
  public static let integrationSAS: Swift.String
  public static let integrationAdmob: Swift.String
  public static let integrationMopub: Swift.String
  public static let integrationTypeKey: Swift.String
  public static let integrationVersionKey: Swift.String
  @objc public func disableCrashMonitoring()
  @objc public func enableValidationMode()
  @objc public func disableTeadsAudioSessionManagement()
  @objc public func enableDebug()
  @objc public func disableLocation()
  @available(*, deprecated, message: "use enableLightEndScreen")
  @objc public func enableLigtEndScreen()
  @objc public func enableLightEndScreen()
  @objc public func disableMediaPreload()
  @objc public func pageUrl(_ urlString: Swift.String)
  @objc public func userConsent(subjectToGDPR: Swift.String, consent: Swift.String, tcfVersion: TeadsSDK.TCFVersion = .v1, cmpSdkID: Swift.Int = 0)
  @objc public func setUsPrivacy(consent: Swift.String)
  @objc public func disableBatteryMonitoring()
  @objc public func subscribeAdResizeDelegate(_ delegate: TeadsSDK.TFAMediatedAdViewDelegate, forAdView adView: UIKit.UIView) throws
  @objc public func addExtras(_ value: Swift.String, for key: Swift.String)
  public typealias BuildTeadsAdSettings = (TeadsSDK.TeadsAdSettings) -> Swift.Void
  @objc public init(build: (TeadsSDK.TeadsAdSettings) -> Swift.Void)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc extension TeadsAdSettings {
  @objc dynamic public func toDictionary() throws -> [Swift.AnyHashable : Any]
  @objc dynamic public class func instance(from dictionary: [Swift.AnyHashable : Any]) throws -> TeadsSDK.TeadsAdSettings
}
@objc public class TeadsNativeAdRequest : TeadsSDK.TeadsAdRequest {
  @objc public init(template: TeadsSDK.TeadsNativeAdView.Template, settings: TeadsSDK.TeadsAdSettings?)
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  @objc override public init(settings: TeadsSDK.TeadsAdSettings?)
}
@objc public class TeadsAdRequest : ObjectiveC.NSObject, Swift.Encodable {
  @objc public init(settings: TeadsSDK.TeadsAdSettings?)
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc public protocol TFAMediatedAdViewDelegate : AnyObject {
  @objc func didUpdateRatio(_ adView: UIKit.UIView, ratio: CoreGraphics.CGFloat)
}
@objc public protocol TFASoundDelegate {
  @objc func adWillStartPlayingAudio(_ ad: TeadsSDK.TFAAdView)
  @objc func adDidStopPlayingAudio(_ ad: TeadsSDK.TFAAdView)
}
@objc public protocol TFAAdDelegate {
  @objc func didReceiveAd(_ ad: TeadsSDK.TFAAdView, adRatio: CoreGraphics.CGFloat)
  @objc func didFailToReceiveAd(_ ad: TeadsSDK.TFAAdView, adFailReason: TeadsSDK.AdFailReason)
  @objc func adClose(_ ad: TeadsSDK.TFAAdView, userAction: Swift.Bool)
  @objc func adError(_ ad: TeadsSDK.TFAAdView, errorMessage: Swift.String)
  @objc optional func adBrowserWillOpen(_ ad: TeadsSDK.TFAAdView) -> UIKit.UIViewController?
  @objc optional func adBrowserDidOpen(_ ad: TeadsSDK.TFAAdView)
  @objc optional func adBrowserDidClose(_ ad: TeadsSDK.TFAAdView)
  @objc optional func adDidOpenFullscreen(_ ad: TeadsSDK.TFAAdView)
  @objc optional func adDidCloseFullscreen(_ ad: TeadsSDK.TFAAdView)
  @objc optional func adPlaybackChange(_ ad: TeadsSDK.TFAAdView, state: TeadsSDK.TFAAdView.TeadsAdPlaybackState)
  @objc optional func adDidChangeVolume(_ ad: TeadsSDK.TFAAdView, muted: Swift.Bool)
  @objc func didUpdateRatio(_ ad: TeadsSDK.TFAAdView, ratio: CoreGraphics.CGFloat)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class TFAAdView : UIKit.UIView {
  @objc public enum TeadsAdPlaybackState : Swift.Int {
    case playbackStateCompleted = 0
    case playbackStateStarted = 1
    case playbackStatePaused = 2
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var isLoading: Swift.Bool {
    @objc get
  }
  @objc public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc public var isPlaying: Swift.Bool {
    @objc get
  }
  @objc public var isSoundActive: Swift.Bool {
    @objc get
  }
  @objc weak public var delegate: TeadsSDK.TFAAdDelegate?
  @objc weak public var soundDelegate: TeadsSDK.TFASoundDelegate?
  @objc @IBInspectable public var pid: Swift.Int
  public var adRatio: CoreGraphics.CGFloat {
    get
  }
  @objc override dynamic public var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic public var frame: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc override dynamic public func didMoveToSuperview()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func load(teadsAdSettings: TeadsSDK.TeadsAdSettings? = nil)
  @objc public func enableDebug()
  @available(*, deprecated, message: "it is no longer needed to monitor your inventory.")
  @objc public func setAdContainerView(container: UIKit.UIView)
  @objc public func addContextInfo(infoKey: Swift.String, infoValue: Swift.String)
  @objc deinit
  @objc public func dismissFullscreen()
  @objc public func reset()
  @available(*, deprecated, message: "it is no longer needed to monitor your inventory.")
  @objc public func slotReached()
}
@objc @_inheritsConvenienceInitializers @IBDesignable public class TeadsMediaView : UIKit.UIView {
  @objc @IBInspectable public var placeholderImage: UIKit.UIImage?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension URLSession {
  #warning("UNUSED?")
}
@objc public protocol TFARewardedAdDelegate {
  @objc func rewarded(_ rewardedAd: TeadsSDK.TFARewardedAd, didRewardUserWith reward: TeadsSDK.TFAReward?)
  @objc func rewarded(_ rewardedAd: TeadsSDK.TFARewardedAd, didFailToReceiveAdWithError: Swift.String)
  @objc func rewardedAdDidReceive(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc optional func rewardedAdDidOpen(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc optional func rewardedAdDidStartPlaying(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc optional func rewardedAdDidCompletePlaying(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc optional func rewardedAdDidClose(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc optional func rewardedAdBrowserDidOpen(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc optional func rewardedAdBrowserDidClose(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc optional func rewardedAdWillLeaveApplication(_ rewardedAd: TeadsSDK.TFARewardedAd)
}
@_hasMissingDesignatedInitializers @objc public class TFAReward : ObjectiveC.NSObject {
  @objc public var type: Swift.String?
  @objc public var amount: Swift.Double
  @objc deinit
  @objc override dynamic public init()
}
@objc public class TFARewardedAd : ObjectiveC.NSObject, TeadsSDK.TFAAdDelegate {
  @objc weak public var delegate: TeadsSDK.TFARewardedAdDelegate?
  @objc public var isShown: Swift.Bool
  @objc public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc public var isLoading: Swift.Bool {
    @objc get
  }
  @objc public init(withPid pid: Swift.Int, andDelegate delegate: TeadsSDK.TFARewardedAdDelegate? = nil)
  @available(*, deprecated, message: "use init(withPid: andDelegate:)")
  @objc convenience public init(pid: Swift.String, delegate: TeadsSDK.TFARewardedAdDelegate? = nil)
  @objc deinit
  @objc public func load(settings: TeadsSDK.TeadsAdSettings? = nil)
  @objc public func show()
  @objc public func addContextInfo(infoKey: Swift.String, infoValue: Swift.String)
  @objc public func didUpdateRatio(_ ad: TeadsSDK.TFAAdView, ratio: CoreGraphics.CGFloat)
  @objc public func didReceiveAd(_ ad: TeadsSDK.TFAAdView, adRatio: CoreGraphics.CGFloat)
  @objc public func didFailToReceiveAd(_ ad: TeadsSDK.TFAAdView, adFailReason: TeadsSDK.AdFailReason)
  @objc public func adClose(_ ad: TeadsSDK.TFAAdView, userAction: Swift.Bool)
  @objc public func adError(_ ad: TeadsSDK.TFAAdView, errorMessage: Swift.String)
  @objc public func adPlaybackChange(_ ad: TeadsSDK.TFAAdView, state: TeadsSDK.TFAAdView.TeadsAdPlaybackState)
  @objc public func adBrowserDidOpen(_ ad: TeadsSDK.TFAAdView)
  @objc public func adBrowserDidClose(_ ad: TeadsSDK.TFAAdView)
  @objc override dynamic public init()
}
@objc public protocol TeadsAdPlacementDelegate {
  @objc func adPlacement(_ adPlacement: TeadsSDK.TeadsAdPlacement, didReceiveNativeAd nativeAd: TeadsSDK.TeadsNativeAd)
  @objc func adPlacement(_ adPlacement: TeadsSDK.TeadsAdPlacement, didFailToReceiveAd adFailReason: TeadsSDK.AdFailReason)
}
@objc public class TeadsAdPlacement : ObjectiveC.NSObject {
  @objc deinit
  @objc public init?(placementId: Swift.Int, delegate: TeadsSDK.TeadsAdPlacementDelegate)
  @objc public func requestAd(_ request: TeadsSDK.TeadsAdRequest)
  @objc override dynamic public init()
}
extension UIView {
}
@objc public protocol TFAInterstitialAdDelegate {
  @objc func interstitialDidReceiveAd(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc func interstitial(_ ad: TeadsSDK.TFAInterstitialAd, didFailToReceiveAdWithError error: Swift.String)
  @objc optional func interstitialWillOpen(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc optional func interstitialWillClose(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc optional func interstitialDidOpen(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc optional func interstitialDidClose(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc optional func interstitialBrowserDidOpen(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc optional func interstitialBrowserDidClose(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc optional func interstitialWillLeaveApplication(_ ad: TeadsSDK.TFAInterstitialAd)
}
@objc public class TFAInterstitialAd : ObjectiveC.NSObject, TeadsSDK.TFAAdDelegate {
  @objc weak public var delegate: TeadsSDK.TFAInterstitialAdDelegate?
  @objc public var isShown: Swift.Bool
  @objc public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc public var isLoading: Swift.Bool {
    @objc get
  }
  @objc public init(withPid pid: Swift.Int, andDelegate delegate: TeadsSDK.TFAInterstitialAdDelegate? = nil)
  @available(*, deprecated, message: "use init(withPid: andDelegate:)")
  @objc convenience public init(pid: Swift.String, delegate: TeadsSDK.TFAInterstitialAdDelegate? = nil)
  @objc deinit
  @objc public func load(settings: TeadsSDK.TeadsAdSettings? = nil)
  @objc public func show()
  @objc public func addContextInfo(infoKey: Swift.String, infoValue: Swift.String)
  @objc public func didUpdateRatio(_ ad: TeadsSDK.TFAAdView, ratio: CoreGraphics.CGFloat)
  @objc public func didReceiveAd(_ ad: TeadsSDK.TFAAdView, adRatio: CoreGraphics.CGFloat)
  @objc public func didFailToReceiveAd(_ ad: TeadsSDK.TFAAdView, adFailReason: TeadsSDK.AdFailReason)
  @objc public func adClose(_ ad: TeadsSDK.TFAAdView, userAction: Swift.Bool)
  @objc public func adError(_ ad: TeadsSDK.TFAAdView, errorMessage: Swift.String)
  @objc public func adBrowserDidOpen(_ ad: TeadsSDK.TFAAdView)
  @objc public func adBrowserDidClose(_ ad: TeadsSDK.TFAAdView)
  @objc override dynamic public init()
}
@objc public enum TCFVersion : Swift.Int, Swift.Codable {
  case v1 = 1
  case v2 = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class TeadsNativeImageAsset : TeadsSDK.TeadsNativeAsset {
  required public init(from decoder: Swift.Decoder) throws
  public func loadImage(async: Swift.Bool = true, success: ((UIKit.UIImage) -> Swift.Void)? = nil, failure: ((Swift.Error) -> Swift.Void)? = nil)
  @objc deinit
}
extension Dictionary where Key == Swift.String, Value == Swift.String {
  public typealias RawValue = Swift.String
  public init?(_ description: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum AdErrorCode : Swift.Int {
  case errorNoSlot = 1
  case errorNetwork = 2
  case errorNotFilled = 3
  case errorBadResponse = 4
  case errorVastError = 5
  case errorUserIdMissing = 6
  case errorInternal = 7
  case disabledApp = 8
  case errorAdRequest = 9
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AdFailReason : ObjectiveC.NSObject {
  @objc public var errorCode: TeadsSDK.AdErrorCode
  @objc public var errorMessage: Swift.String
  @objc public init(errorCode: TeadsSDK.AdErrorCode, errorMessage: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable public class TeadsNativeAdView : UIKit.UIView {
  @objc @IBOutlet weak public var titleLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var contentLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var mediaView: TeadsSDK.TeadsMediaView?
  @objc @IBOutlet weak public var iconImageView: UIKit.UIImageView?
  @objc @IBOutlet weak public var advertiserLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var callToActionButton: UIKit.UIButton?
  @objc @IBOutlet weak public var ratingView: UIKit.UIView?
  @objc @IBOutlet weak public var priceLabel: UIKit.UILabel?
  @objc public enum Template : Swift.Int, Swift.Codable {
    case mopub = -2
    case admob = -1
    case feedArticle = 0
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var nativeAd: TeadsSDK.TeadsNativeAd? {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_hasMissingDesignatedInitializers @IBDesignable public class TFACustomAdView : TeadsSDK.TFAAdView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc public init(withPid pid: Swift.Int, andDelegate delegate: TeadsSDK.TFAAdDelegate? = nil)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol TeadsNativeAdDelegate {
  @objc optional func nativeAdDidRecordAdImpression(_ nativeAd: TeadsSDK.TeadsNativeAd)
  @objc optional func nativeAdDidRecordAdClick(_ nativeAd: TeadsSDK.TeadsNativeAd)
}
@_hasMissingDesignatedInitializers @objc public class TeadsNativeAd : ObjectiveC.NSObject {
  @objc final public let title: TeadsSDK.TeadsNativeAsset?
  @objc final public let content: TeadsSDK.TeadsNativeAsset?
  @objc final public let imageUrl: TeadsSDK.TeadsNativeImageAsset?
  @objc final public let iconUrl: TeadsSDK.TeadsNativeImageAsset?
  @objc final public let sponsored: TeadsSDK.TeadsNativeAsset?
  @objc final public let callToAction: TeadsSDK.TeadsNativeAsset?
  @objc final public let video: TeadsSDK.TeadsNativeAsset?
  @objc final public let rating: TeadsSDK.TeadsNativeAsset?
  @objc final public let price: TeadsSDK.TeadsNativeAsset?
  @objc final public let adChoices: TeadsSDK.TeadsNativeAsset?
  @objc weak public var delegate: TeadsSDK.TeadsNativeAdDelegate?
  @objc public var assets: [TeadsSDK.TeadsNativeAsset]? {
    get
  }
  @objc deinit
  @objc public func registerContainer(in view: UIKit.UIView)
  @objc public func register(asset: TeadsSDK.TeadsNativeAsset, in view: UIKit.UIView)
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class Teads : ObjectiveC.NSObject {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension Teads {
  @objc dynamic public class func configure()
}
@objc @_hasMissingDesignatedInitializers @IBDesignable public class TFAInReadAdView : TeadsSDK.TFAAdView {
  @objc public init(withPid pid: Swift.Int, andDelegate delegate: TeadsSDK.TFAAdDelegate? = nil)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension TeadsSDK.TFAAdView.TeadsAdPlaybackState : Swift.Equatable {}
extension TeadsSDK.TFAAdView.TeadsAdPlaybackState : Swift.Hashable {}
extension TeadsSDK.TFAAdView.TeadsAdPlaybackState : Swift.RawRepresentable {}
extension TeadsSDK.TCFVersion : Swift.Equatable {}
extension TeadsSDK.TCFVersion : Swift.Hashable {}
extension TeadsSDK.TCFVersion : Swift.RawRepresentable {}
extension TeadsSDK.AdErrorCode : Swift.Equatable {}
extension TeadsSDK.AdErrorCode : Swift.Hashable {}
extension TeadsSDK.AdErrorCode : Swift.RawRepresentable {}
extension TeadsSDK.TeadsNativeAdView.Template : Swift.Equatable {}
extension TeadsSDK.TeadsNativeAdView.Template : Swift.Hashable {}
extension TeadsSDK.TeadsNativeAdView.Template : Swift.RawRepresentable {}
