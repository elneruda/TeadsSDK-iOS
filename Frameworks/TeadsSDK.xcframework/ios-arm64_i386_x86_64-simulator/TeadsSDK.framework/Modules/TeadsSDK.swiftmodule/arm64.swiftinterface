// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TeadsSDK
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import CoreGraphics
import CoreTelephony
import Foundation
import JavaScriptCore
import OMSDK_Teadstv
import SafariServices
import Swift
import SystemConfiguration
@_exported import TeadsSDK
import UIKit
import WebKit
extension UIView {
  @objc dynamic public func bind(component: TeadsSDK.CommonComponent?)
}
@_hasMissingDesignatedInitializers @objc public class TeadsAdRatio : ObjectiveC.NSObject {
  @objc public static let zero: TeadsSDK.TeadsAdRatio
  @objc public static let `default`: TeadsSDK.TeadsAdRatio
  @objc(calculateHeightForWidth:) public func calculateHeight(for width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public func value(for width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol TeadsNativeAdPlacementDelegate : AnyObject {
  @objc func didReceiveAd(ad: TeadsSDK.TeadsNativeAd)
  @objc func didFailToReceiveAd(reason: TeadsSDK.AdFailReason)
  @objc func adOpportunityTrackerView(trackerView: TeadsSDK.TeadsAdOpportunityTrackerView)
}
@_hasMissingDesignatedInitializers @objc public class TeadsNativeAdPlacement : TeadsSDK.TeadsAdPlacement {
  public func requestAd(requestSettings: TeadsSDK.TeadsNativeAdRequestSettings)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class TeadsAdapterSettings : ObjectiveC.NSObject, Swift.Codable, TeadsSDK.TeadsAdPlacementSettingsProtocol, TeadsSDK.TeadsAdRequestSettingsProtocol {
  public static let integrationAdmob: Swift.String
  public static let integrationMopub: Swift.String
  public static let integrationSAS: Swift.String
  public static let integrationTypeKey: Swift.String
  public static let integrationVersionKey: Swift.String
  public var adRequestSettings: TeadsSDK.TeadsAdRequestSettings
  public var adPlacementSettings: TeadsSDK.TeadsAdPlacementSettings
  public typealias BuildTeadsAdapterSettings = (TeadsSDK.TeadsAdapterSettings) -> Swift.Void
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc public init(build: (TeadsSDK.TeadsAdapterSettings) -> Swift.Void)
  @objc public func disableCrashMonitoring()
  @objc public func disableTeadsAudioSessionManagement()
  @objc public func disableLocation()
  @objc public func enableLightEndScreen()
  @objc public func disableMediaPreload()
  @objc public func userConsent(subjectToGDPR: Swift.String, consent: Swift.String, tcfVersion: TeadsSDK.TCFVersion = .v1, cmpSdkID: Swift.Int = 0)
  @objc public func setUsPrivacy(consent: Swift.String)
  @objc public func disableBatteryMonitoring()
  @objc public func addExtras(_ value: Swift.String, for key: Swift.String)
  @objc public func enableDebug()
  @objc public func enableValidationMode()
  @objc public func pageUrl(_ urlString: Swift.String)
  @available(*, deprecated, renamed: "registerAdView(_:delegate:)")
  @objc public func subscribeAdResizeDelegate(_ delegate: TeadsSDK.TeadsMediatedAdViewDelegate, forAdView adView: UIKit.UIView) throws
  @objc public func registerAdView(_ adView: UIKit.UIView, delegate: TeadsSDK.TeadsMediatedAdViewDelegate?)
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc extension TeadsAdapterSettings {
  @objc dynamic public func toDictionary() throws -> [Swift.AnyHashable : Any]
  @objc dynamic public class func instance(from dictionary: [Swift.AnyHashable : Any]) throws -> TeadsSDK.TeadsAdapterSettings
}
@_inheritsConvenienceInitializers @objc final public class Teads : ObjectiveC.NSObject {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  final public class func createNativePlacement(pid: Swift.Int, settings: TeadsSDK.TeadsAdPlacementSettings = TeadsAdPlacementSettings(), delegate: TeadsSDK.TeadsNativeAdPlacementDelegate) -> TeadsSDK.TeadsNativeAdPlacement?
  @objc final public class func createInReadPlacement(pid: Swift.Int, settings: TeadsSDK.TeadsAdPlacementSettings = TeadsAdPlacementSettings(), delegate: TeadsSDK.TeadsInReadAdPlacementDelegate) -> TeadsSDK.TeadsInReadAdPlacement?
  @objc deinit
  @objc override dynamic public init()
}
extension Teads {
  @objc final public class func configure()
}
extension UILabel {
  @objc override dynamic public func bind(component: TeadsSDK.CommonComponent?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TeadsMediaView : UIKit.UIView {
  @objc override dynamic public var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  public var placeholderImage: UIKit.UIImage?
  @objc public init(videoComponent: TeadsSDK.VideoComponent)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public func bind(component: TeadsSDK.CommonComponent?)
  @objc deinit
}
extension Array where Element : UIKit.NSLayoutConstraint {
  public func activate()
}
@objc public protocol TeadsInReadAdPlacementDelegate : AnyObject {
  @objc func didReceiveAd(ad: TeadsSDK.TeadsInReadAd, adRatio: TeadsSDK.TeadsAdRatio)
  @objc func didFailToReceiveAd(reason: TeadsSDK.AdFailReason)
  @objc func adOpportunityTrackerView(trackerView: TeadsSDK.TeadsAdOpportunityTrackerView)
  @objc func didUpdateRatio(ad: TeadsSDK.TeadsInReadAd, adRatio: TeadsSDK.TeadsAdRatio)
}
@_hasMissingDesignatedInitializers @objc public class TeadsInReadAdPlacement : TeadsSDK.TeadsAdPlacement {
  @objc public func requestAd(requestSettings: TeadsSDK.TeadsAdRequestSettings)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class TeadsNativeAd : TeadsSDK.TeadsAd {
  @objc public var title: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc public var content: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc public var image: TeadsSDK.ImageComponent? {
    @objc get
  }
  @objc public var icon: TeadsSDK.ImageComponent? {
    @objc get
  }
  @objc public var sponsored: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc public var callToAction: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc public var video: TeadsSDK.VideoComponent? {
    @objc get
  }
  @objc public var rating: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc public var price: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc public var adChoices: TeadsSDK.CommonComponent? {
    @objc get
  }
  @objc public func register(containerView: UIKit.UIView)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class TeadsAdOpportunityTrackerView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public protocol TeadsAdRequestSettingsProtocol {
  func enableValidationMode()
  func pageUrl(_ urlString: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class TeadsAdRequestSettings : ObjectiveC.NSObject, Swift.Codable, TeadsSDK.TeadsAdRequestSettingsProtocol {
  @objc public func enableValidationMode()
  @objc public func pageUrl(_ urlString: Swift.String)
  @objc public func addExtras(_ value: Swift.String, for key: Swift.String)
  public typealias BuildTeadsAdRequestSettings = (TeadsSDK.TeadsAdRequestSettings) -> Swift.Void
  @objc public init(build: (TeadsSDK.TeadsAdRequestSettings) -> Swift.Void)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc public func registerAdView(_ adView: UIKit.UIView, delegate: TeadsSDK.TeadsMediatedAdViewDelegate?)
  @objc deinit
}
@objc public enum TCFVersion : Swift.Int, Swift.Codable {
  case v1 = 1
  case v2 = 2
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension UIButton {
  @objc override dynamic public func bind(component: TeadsSDK.CommonComponent?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ImageComponent : TeadsSDK.CommonComponent {
  final public let url: Foundation.URL
  public func loadImage(async: Swift.Bool = true, success: ((UIKit.UIImage) -> Swift.Void)?, failure: ((Swift.Error) -> Swift.Void)? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class TeadsAdView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias TeadsNativeAdRequestSettings = TeadsSDK.TeadsAdRequestSettings
extension String : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class TeadsAdPlacement : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
public protocol TeadsAdPlacementSettingsProtocol {
  func disableCrashMonitoring()
  func disableTeadsAudioSessionManagement()
  func disableLocation()
  func enableLightEndScreen()
  func disableMediaPreload()
  func userConsent(subjectToGDPR: Swift.String, consent: Swift.String, tcfVersion: TeadsSDK.TCFVersion, cmpSdkID: Swift.Int)
  func setUsPrivacy(consent: Swift.String)
  func disableBatteryMonitoring()
  func addExtras(_ value: Swift.String, for key: Swift.String)
  func enableDebug()
}
@_inheritsConvenienceInitializers @objc public class TeadsAdPlacementSettings : ObjectiveC.NSObject, Swift.Codable, TeadsSDK.TeadsAdPlacementSettingsProtocol {
  public static let integrationAdmob: Swift.String
  public static let integrationMopub: Swift.String
  public static let integrationTypeKey: Swift.String
  public static let integrationVersionKey: Swift.String
  @objc public func disableCrashMonitoring()
  @objc public func disableTeadsAudioSessionManagement()
  @objc public func enableDebug()
  @objc public func disableLocation()
  @objc public func enableLightEndScreen()
  @objc public func disableMediaPreload()
  @objc public func userConsent(subjectToGDPR: Swift.String, consent: Swift.String, tcfVersion: TeadsSDK.TCFVersion = .v1, cmpSdkID: Swift.Int = 0)
  @objc public func setUsPrivacy(consent: Swift.String)
  @objc public func disableBatteryMonitoring()
  @objc public func addExtras(_ value: Swift.String, for key: Swift.String)
  public typealias BuildTeadsAdSettings = (TeadsSDK.TeadsAdPlacementSettings) -> Swift.Void
  @objc public init(build: (TeadsSDK.TeadsAdPlacementSettings) -> Swift.Void)
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension UIImageView {
  @objc override dynamic public func bind(component: TeadsSDK.CommonComponent?)
}
extension FileManager {
  @discardableResult
  public func createFilesAndDirectories(target: Foundation.URL, tarURL: Foundation.URL) throws -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers public class TeadsInReadAd : TeadsSDK.TeadsAd {
  @objc public func registerContainer(in view: UIKit.UIView)
  @objc deinit
}
extension TeadsInReadAd {
  @objc dynamic public var adRatio: TeadsSDK.TeadsAdRatio {
    @objc get
  }
}
@objc public protocol TeadsAdDelegate : AnyObject {
  @objc func willPresentModalView(ad: TeadsSDK.TeadsAd) -> UIKit.UIViewController?
  @objc optional func didCatchError(ad: TeadsSDK.TeadsAd, error: Swift.Error)
  @objc optional func didClose(ad: TeadsSDK.TeadsAd)
  @objc optional func didRecordImpression(ad: TeadsSDK.TeadsAd)
  @objc optional func didRecordClick(ad: TeadsSDK.TeadsAd)
  @objc optional func didExpandedToFullscreen(ad: TeadsSDK.TeadsAd)
  @objc optional func didCollapsedFromFullscreen(ad: TeadsSDK.TeadsAd)
}
@objc public protocol TeadsSoundDelegate {
  @objc func adStartPlayingAudio(_ ad: TeadsSDK.TeadsAd)
  @objc func adStopPlayingAudio(_ ad: TeadsSDK.TeadsAd)
}
@_hasMissingDesignatedInitializers @objc public class TeadsAd : ObjectiveC.NSObject {
  @objc weak public var delegate: TeadsSDK.TeadsAdDelegate? {
    @objc get
    @objc set
  }
  @objc weak public var soundDelegate: TeadsSDK.TeadsSoundDelegate? {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class TeadsNativeAdView : TeadsSDK.TeadsAdView {
  @objc @IBOutlet weak public var titleLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var contentLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var mediaView: TeadsSDK.TeadsMediaView?
  @objc @IBOutlet weak public var iconImageView: UIKit.UIImageView?
  @objc @IBOutlet weak public var advertiserLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var callToActionButton: UIKit.UIButton?
  @objc @IBOutlet weak public var ratingView: UIKit.UIView?
  @objc @IBOutlet weak public var priceLabel: UIKit.UILabel?
  public func bind(_ ad: TeadsSDK.TeadsNativeAd)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_hasMissingDesignatedInitializers @objc public class ContainerComponent : TeadsSDK.CommonComponent {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CommonComponent : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
extension CommonComponent {
  public var text: Swift.String? {
    get
  }
}
@objc public protocol TeadsMediatedAdViewDelegate : AnyObject {
  @objc func didUpdateRatio(_ adView: UIKit.UIView, adRatio: TeadsSDK.TeadsAdRatio)
}
@_inheritsConvenienceInitializers @objc public class TeadsInReadAdView : TeadsSDK.TeadsAdView {
  @objc override dynamic public var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc public func bind(_ ad: TeadsSDK.TeadsInReadAd)
  public init(bind ad: TeadsSDK.TeadsInReadAd, frame: CoreGraphics.CGRect = .zero)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VideoComponent : TeadsSDK.CommonComponent {
  @objc deinit
}
@objc public enum AdErrorCode : Swift.Int {
  case errorNoSlot = 1
  case errorNetwork = 2
  case errorNotFilled = 3
  case errorBadResponse = 4
  case errorVastError = 5
  case errorUserIdMissing = 6
  case errorInternal = 7
  case disabledApp = 8
  case errorAdRequest = 9
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AdFailReason : ObjectiveC.NSObject {
  @objc public var errorCode: TeadsSDK.AdErrorCode
  @objc public var errorMessage: Swift.String
  @objc public init(errorCode: TeadsSDK.AdErrorCode, errorMessage: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension TeadsSDK.TCFVersion : Swift.Equatable {}
extension TeadsSDK.TCFVersion : Swift.Hashable {}
extension TeadsSDK.TCFVersion : Swift.RawRepresentable {}
extension TeadsSDK.AdErrorCode : Swift.Equatable {}
extension TeadsSDK.AdErrorCode : Swift.Hashable {}
extension TeadsSDK.AdErrorCode : Swift.RawRepresentable {}
